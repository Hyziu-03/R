Cereals <- read.csv("~/cwiczenia_regresja_dane/cwiczenia_regresja_dane/Cereals.csv", sep=";")
View(Cereals)
tmp_swed017 <- read.csv("~/cwiczenia_regresja_dane/cwiczenia_regresja_dane/tmp_swed017.csv")
View(tmp_swed017)
swed017_data_cut <- read.delim("~/cwiczenia_regresja_dane/cwiczenia_regresja_dane/swed017_data_cut.txt", header=FALSE)
View(swed017_data_cut)
View(swed017_data_cut)
View(swed017_data_cut)
swed017_data_cut <- read.delim("~/cwiczenia_regresja_dane/cwiczenia_regresja_dane/swed017_data_cut.txt")
View(swed017_data_cut)
library(ggplot2)
library(dplyr)
install.packages("dplR")
library(dplR)
summary(Cereals)
print("Wyświetlmy statystyki opisowe dla poszczególnych zmiennych z bazy Cereals")
Cereals_1 <- select(Cereals, calories:rating)
View(Cereals_1)
Cereal_1_cor <- cor(Cereals_1, method = "pearson", use = "complete.obs")
View(Cereal_1_cor)
print("Będziemy pracować na ramce danych z wartościami liczbowymi tylko")
print("Tworzenie macierzy korelacyjnej")
round(Cereal_1_cor, digits = 2)
print("zobaczmy sobie jaka zmienna koreluje się najlepiej ze zmienną "rating"")
print("zobaczmy sobie jaka zmienna koreluje się najlepiej ze zmienną rating)
")
rating_cor <-
round(
cor(Cereals_1$rating,
Cereals_1,
use = "complete.obs"),
digits = 2
)
rating_cor
View(rating_cor)
print("Największa korelacja z cukrem, pomimo tego, że ujemna")
cor.test(
Cereals_1$rating,
Cereals$sugars,
use = "complete.obs"
)
ggplot(Cereals, aes(sugars, rating)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(Cereals, aes(sugars, rating)) +
geom_point()
print("zobaczmy, czy korelacja pomiędzy  rating a sugars jest istotna statystyczni")
print("narysujmy wykres rozrzutu, aby lepiej zobaczyć tę zależność")
?lm
ggplot(Cereals, aes(rating, sugars)) +
geom_point()
rating_model <- lm(Cereals$rating ~ Cereals$sugars)
print("Znajdżmy równanie regresji dla zmiennych rating (zmienna objaśniana) i sugars (zmienna objaśniająca)")
summary(rating_model)
print("estimate są wartościami beta")
print("wartość odżywcza płatków dla 0g cukru: 59.8530")
print("jeżeli będzie o 1g cukru więcej to wartość odżywcza zmaleje o 2.4614")
Cereals %>%
select(name, sugars, rating) %>%
filter(sugars == 5)
print("czy dla płatków o zawartości cukrów = 5g wartość odżywcza rzeczywiście wynosi 47.6")
ggplot(Cereals, aes(sugars, rating)) + geom_point() + geom_smooth(method =
"lm")
plot(rating_model$residuals)
print("Sprawdźmy, czy błędy predykcji dla naszego modelu są równomiernie rozłożone wokół 0")
hist(rating_model$residuals)
print("sprawdźmy, czy błędy mają rozkład normalny")
shapiro.test(rating_model$residuals)
print("zastosujmy test Shapiro-Wilka")
print("rozkład nie jest normalny")
print("wykresy QQ")
print("p value zależy od hipotezy")
qqnorm(rating_model$residuals)
qqline(rating_model$residuals)
print("punkty nie są na prostej")
print("współczynnik determinacji")
summary(rating_model)
summary(rating_model)$r.square
#obliczmy jeszcze raz współczynnik korelacji dla zmiennych rating i sugars
cor(Cereals_1$rating, Cereals$sugars, use = "complete.obs")
cor(Cereals_1$rating, Cereals$sugars, use = "complete.obs") ^ 2
swed017_data_cut
setwd("~/GitHub/R/Dane/cwiczenia_regresja_dane")
swed017_res <- read.crn("swed017_res.txt")
head(swed017_res)
View(swed017_res)
plot(swed017_res)
tmp_swed017 <- as.vector(as.matrix(tmp_swed017))
is(tmp_swed017)
# władujmy dane gridowe (przez: import dataset, UWAGA: przy importowaniu danych należy ustawić "row names" na "use first column”)
# zobaczmy jak wyglądają dane
View(swed017_data_cut)
swed017_data <- right_join(swed017_chron, tmp_swed017, by = "year")
swed017_chron <- select(swed017_chron, year, swed017)
swed017_data <- right_join(swed017_chron, tmp_swed017, by = "year")
swed017_data_cut <- filter(swed017_data, year <= 1978)
cor(swed017_data_cut$swed017, swed017_data_cut)
cor.test(swed017_data_cut$swed017, swed017_data_cut$tmp6)
cor.test(swed017_data_cut$swed017, swed017_data_cut$tmp7)
rating_model_swed017 <-
lm(swed017_data_cut$swed017 ~ swed017_data_cut$tmp_lato)
swed017_data_cut <- mutate(swed017_data_cut, tmp_lato = (tmp6 + tmp7) / 2)
shapiro.test(rating_model_swed017$residuals)
swed017_data_cut <- mutate(swed017_data_cut, tmp_lato = (tmp6 + tmp7) / 2)
View(swed017_data_cut)
cor.test(swed017_data_cut$swed017, swed017_data_cut$tmp6)
cor.test(swed017_data_cut$swed017, swed017_data_cut$tmp7)
ggplot(swed017_data_cut, aes(tmp_lato, swed017)) + geom_point()
ggplot(swed017_data_cut, aes(tmp_lato, swed017)) + geom_point() + geom_smooth(method = "lm")
rating_model_swed017 <-
lm(swed017_data_cut$swed017 ~ swed017_data_cut$tmp_lato)
summary(rating_model_swed017)
savehistory("C:/Users/szymo/Documents/GitHub/R/Skrypty/regresja.Rhistory")
